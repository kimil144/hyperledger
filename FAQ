1. Endorsement
    Q: 트랜잭션을 승인하는 peer의 수는 어느정도여야 하는가?
    A: 트랜잭션을 보증하는데 필요한 peer의 수는 chaincode를 배포할 때 지정하는 보증 정책에 의해 결정된다.
    Q: 애플리케이션 클라이언트에서는 모든 peer에 연결해야 하는가?
    A: 클라이언트는 chaincode에 대한 보증 정책에서 요구하는 만큼 peer에 연결하면 된다.

2. Security & Access Control
    Q: 데이터 프라이버시는 어떻게 보증하는가?
    A: 데이터 프라이버시에는 다양한 측면이 있다.
       첫째. 네트워크를 채널로 분리할 수 있다. 각 채널은 해당 채널에 배포된 chaincode의 데이터를 볼 수 있는 참가자의 하위 집합을 나타낸다.
       둘째. 채널 내에서 가시성(visibility) 설정을 사용하여 입력 데이터를 chaincode로 제한 할 수 있다. 가시성 설정은 출력 데이터와 비교하여
             입력 및 출력 chaincode데이터가 제출 된 트랜잭션에 포함되는지 여부를 결정한다.
       셋째. chaincode를 호출하기 전에 데이터를 해쉬하거나 암호화 할 수 있다. 데이터를 해쉬하면 원본 데이터를 공유할 수 있는 방법을 제공해야 한다.
             데이터를 암호화하는 경우 복호화 키를 공유 할 수 있는 방법을 제공해야 한다.
       넷째. chaincode logic에 대한 액세스 제어(Access Control)를 구축하여 조직의 특정 역할에 대한 데이터 액세스를 제한 할 수 있다.
       다섯째. 나머지 원장(ledger) 데이터는 peer에서 파일 시스템 암호화를 암호화 할 수 있으며 전송 중 데이터는 TLS를 통해 암호된다.
    Q: Orderer는 트랜잭션 데이터를 볼 수 있는가?
    A: No, Orderer는 트랜잭션만 주문하여 트랜잭션을 열지 않는다. 데이터가 Orderer를 거치지 않고 입력 데이터에 대해서만 염려하는 경우
       가지성 설정을 사용할 수 있다. 가시정 설정은 출력 데이터와 비교하여 입력 및 출력 chaincode데이터가 제출 된 제출 된 트랜잭션에 포함되는지
       여부를 결정한다. 따라서 입력 데이터는 Endosers만 전용으로 사용할 수 있다. Orderer가 chaincode 출력을 보지 못하도록하려면 chaincode를
       호출하기 전에 데이터를 해쉬하거나 암호화 할 수 있다.

3. Application-side Programming Model
    Q: 애플리케이션 클라이언트는 트랜잭션의 결과를 어떻게 알 수 있는가?
    A: 트랜잭션 시뮬레이션 결과는 proposal 응답에서 Endorser가 클라이언트에 반환한다. 여러개의 Endorser가 있는 경우 클라이언트는
       응답이 모두 같은지 확인하고 ordering 및 commitment에 대한 결과와 보증(endorsements)을 제출할 수 있다. 궁극적으로 committing peer는
       트랜잭션을 확인하거나 무효화하고 클라이언트는 SDK를 통해 응용 프로그램 클라이언트가 사용할 수 있게 하는 이벤트를 통해 결과를 알게 된다.
    Q: 원장(ledger) 데이터는 어떻게 조회하는가?
    A: chaincode내에서 키를 기반으로 쿼리 할 수 있다. 키는 범위별로 쿼리 할 수 있으며 복합 키는 여래 매개 변수에 대해 등가 쿼리를
       사용할 수 있도록 모델링 할 수 있다. 예를 들어, (owner, asset_id)의 복합 키를 사용하여 특정 엔티티가 소유 한 모든 자산을 조회할 수 있다.
       이러한 키 기반 쿼리는 원장에 대한 읽기 전용 쿼리 및 원장을 업데이트하는 트랜잭션에 사용할 수 있다.
       자산 데이터(Asset Data)를 chaincode의 JSON으로 모델링하고 CouchDB를 상태 데이터베이스로 사용하는 경우 chaincode내의 CouchDB JSON 쿼리
       언어를 사용하여 chaincode데이터 값에 대해 복잡한 리치 쿼리를 수행 할 수도 있다. 응용 프로그램 클라이언트는 읽기 전용 조회를 수행 할 수
       있지만 일반적으로 이러한 응답은 트랜잭션의 일부로 ordering 서비스에 제출되지 않는다.
    Q: 내역 데이터를 조회하여 데이터 출처를 확인하려면 어떻게 해야 하는가?
    A: chaincode API GetHistoryForKey()는 키에 대한 값 내역을 반환한다.
    Q: 조회 결과가 정확하다는 것을 보장하는 방법, 특히 조회 되는 peer가 복구되어 블록 처리를 지연시킬 
    A: 클라이언트는 여러 peer를 조회하고, 블록 높이를 비교하고, 조회 결과를 비교하며, 상위 블록 높이의 peer를 선호할 수 있다.

4. Chaincode (Smart Contracts and Digital Assets)
